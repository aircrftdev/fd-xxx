"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const plugin_manager_1 = require("./plugin-manager");
const input_manager_1 = require("./input-manager");
const context_manager_1 = require("./context-manager");
const context_extensions_1 = require("./context-extensions");
const execution_manager_1 = require("./execution-manager");
const constants_1 = require("./domain/constants");
const project_config_version_check_1 = require("./project-config-version-check");
async function run() {
    try {
        let pluginPlatform = await plugin_manager_1.getPluginPlatform();
        let input = input_manager_1.getCommandLineInput(pluginPlatform);
        let verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        if (!verificationResult.verified) {
            if (verificationResult.message) {
                context_extensions_1.print.warning(verificationResult.message);
            }
            pluginPlatform = await plugin_manager_1.scan();
            input = input_manager_1.getCommandLineInput(pluginPlatform);
            verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        }
        if (!verificationResult.verified) {
            if (verificationResult.helpCommandAvailable) {
                input.command = constants_1.constants.HELP;
            }
            else {
                throw new Error(verificationResult.message);
            }
        }
        const context = context_manager_1.constructContext(pluginPlatform, input);
        await project_config_version_check_1.checkProjectConfigVersion(context);
        await execution_manager_1.executeCommand(context);
        context_manager_1.persistContext(context);
        return 0;
    }
    catch (e) {
        if (e.message) {
            context_extensions_1.print.error(e.message);
        }
        if (e.stack) {
            context_extensions_1.print.info(e.stack);
        }
        return 1;
    }
}
exports.run = run;
async function execute(input) {
    try {
        let pluginPlatform = await plugin_manager_1.getPluginPlatform();
        let verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        if (!verificationResult.verified) {
            if (verificationResult.message) {
                context_extensions_1.print.warning(verificationResult.message);
            }
            pluginPlatform = await plugin_manager_1.scan();
            verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        }
        if (!verificationResult.verified) {
            if (verificationResult.helpCommandAvailable) {
                input.command = constants_1.constants.HELP;
            }
            else {
                throw new Error(verificationResult.message);
            }
        }
        const context = context_manager_1.constructContext(pluginPlatform, input);
        await execution_manager_1.executeCommand(context);
        context_manager_1.persistContext(context);
        return 0;
    }
    catch (e) {
        if (e.message) {
            context_extensions_1.print.error(e.message);
        }
        if (e.stack) {
            context_extensions_1.print.info(e.stack);
        }
        return 1;
    }
}
exports.execute = execute;
async function executeAmplifyCommand(context) {
    const commandPath = path.normalize(path.join(__dirname, 'commands', context.input.command));
    const commandModule = require(commandPath);
    await commandModule.run(context);
}
exports.executeAmplifyCommand = executeAmplifyCommand;
//# sourceMappingURL=index.js.map