import { Template } from 'cloudform-types';
import { ProjectOptions } from './amplifyUtils';
export declare const TRANSFORM_CONFIG_FILE_NAME = "transform.conf.json";
export declare const TRANSFORM_BASE_VERSION = 4;
export declare const TRANSFORM_CURRENT_VERSION = 5;
export interface TransformMigrationConfig {
    V1?: {
        Resources: string[];
    };
}
export declare enum ConflictHandlerType {
    OPTIMISTIC = "OPTIMISTIC_CONCURRENCY",
    AUTOMERGE = "AUTOMERGE",
    LAMBDA = "LAMBDA"
}
export declare type ConflictDectionType = 'VERSION' | 'NONE';
export declare type SyncConfigOPTIMISTIC = {
    ConflictDetection: ConflictDectionType;
    ConflictHandler: ConflictHandlerType.OPTIMISTIC;
};
export declare type SyncConfigSERVER = {
    ConflictDetection: ConflictDectionType;
    ConflictHandler: ConflictHandlerType.AUTOMERGE;
};
export declare type SyncConfigLAMBDA = {
    ConflictDetection: ConflictDectionType;
    ConflictHandler: ConflictHandlerType.LAMBDA;
    LambdaConflictHandler: {
        name: string;
        region?: string;
        lambdaArn?: any;
    };
};
export declare type SyncConfig = SyncConfigOPTIMISTIC | SyncConfigSERVER | SyncConfigLAMBDA;
export declare type ResolverConfig = {
    project: SyncConfig;
    models: {
        [key: string]: SyncConfig;
    };
};
export interface TransformConfig {
    StackMapping?: {
        [resourceId: string]: string;
    };
    TransformerOptions?: {
        [transformer: string]: {
            [option: string]: any;
        };
    };
    Migration?: TransformMigrationConfig;
    Version?: number;
    ResolverConfig?: ResolverConfig;
}
export declare function loadConfig(projectDir: string): Promise<TransformConfig>;
export declare function writeConfig(projectDir: string, config: TransformConfig): Promise<TransformConfig>;
interface ProjectConfiguration {
    schema: string;
    resolvers: {
        [k: string]: string;
    };
    stacks: {
        [k: string]: Template;
    };
    config: TransformConfig;
}
export declare function loadProject(projectDirectory: string, opts?: ProjectOptions): Promise<ProjectConfiguration>;
export declare function readSchema(projectDirectory: string): Promise<string>;
export {};
//# sourceMappingURL=transformConfig.d.ts.map