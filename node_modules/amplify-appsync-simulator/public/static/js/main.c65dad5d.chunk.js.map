{"version":3,"sources":["../../../node_modules/graphql-language-service-utils/esm sync /^.*/.js$","../../../node_modules/graphql-language-service-utils/esm sync /^.*/.json$","../../../node_modules/graphql-language-service-utils/esm lazy /^.*/.js$/ groupOptions: {} namespace object","../../../node_modules/graphql-language-service-utils/esm lazy /^.*/.json$/ groupOptions: {} namespace object","AuthModal.tsx","utils/jwt.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","webpackAsyncContext","Promise","then","webpackEmptyAsyncContext","AUTH_MODE","generateToken","decodedToken","JSON","parse","token","sign","verify","message","decode","refreshToken","issuer","tokenObj","length","iss","exp","Math","floor","Date","now","stringify","AuthModal","props","args","state","currentCognitoToken","currentOIDCTokenDecoded","currentOIDCToken","userName","userGroups","apiKey","possibleGroups","email","supportedAuthModes","API_KEY","isOpen","currentAuthMode","oidcTokenError","parseJWTToken","authModes","selectedAuthMode","onClose","bind","onGroupChange","onGroupAdd","onGenerate","changeAPIKey","changeEmail","onUserNameChange","onOIDCTokenChange","onAuthModeChange","result","authMode","this","cognitoToken","AMAZON_COGNITO_USER_POOLS","OIDCToken","OPENID_CONNECT","ev","data","setState","value","formContent","actionText","Form","Field","Input","readOnly","placeholder","onChange","Dropdown","search","options","g","key","text","selection","fluid","multiple","allowAdditions","onAddItem","errorLabel","Label","basic","color","pointing","TextArea","rows","spellCheck","authModeOptions","filter","mode","Modal","onActionClick","open","Header","Content","Description","Actions","Button","primary","onClick","newState","generateCognitoJWTToken","generateOIDCJWTToken","tokenPayload","sub","email_verified","algorithm","phone_number_verified","aud","event_id","token_use","phone_number","Component","DEFAULT_COGNITO_JWT_TOKEN","DEFAULT_OIDC_JWT_TOKEN","AUTH_TYPE_TO_NAME","DEFAULT_API_INFO","name","defaultAuthenticationType","authenticationType","additionalAuthenticationProviders","LOCAL_STORAGE_KEY_NAMES","fetcher","params","additionalHeaders","headers","Accept","fetch","method","body","response","json","responseBody","DEFAULT_QUERY","App","rest","_graphiql","schema","query","explorerIsOpen","authModalVisible","apiInfo","credentials","cognitoJWTToken","oidcJWTToken","toggleAuthModal","prevState","switchAuthMode","val","_handleInspectOperation","cm","mousePos","parsedQuery","console","error","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","log","operationKind","kind","operation","operationName","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","_handleToggleExplorer","loadCredentials","getIntrospectionQuery","introspectionResult","editor","getQueryEditor","setOption","extraKeys","buildClientSchema","window","localStorage","setItem","authProviders","possibleAuth","auth","includes","getItem","warn","issuers","openIDConnectConfig","Issuer","authModal","storeCredentials","className","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","onEditQuery","Toolbar","handlePrettifyQuery","label","title","handleToggleHistory","Select","onSelect","SelectOption","selected","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c65dad5d.chunk.js","sourcesContent":["var map = {\n\t\"./Range.js\": 106,\n\t\"./file.js\": 138,\n\t\"./getASTNodeAtPosition.js\": 137,\n\t\"./index.js\": 41,\n\t\"./validateWithCustomRules.js\": 161\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 533;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 534;","var map = {\n\t\"./Range.js\": 106,\n\t\"./file.js\": 138,\n\t\"./getASTNodeAtPosition.js\": 137,\n\t\"./index.js\": 41,\n\t\"./validateWithCustomRules.js\": 161\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 535;\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 536;","import React, { Component } from 'react';\nimport { Button, Form, Modal, Dropdown, Input, TextArea, Label } from 'semantic-ui-react';\nimport { generateToken, parse } from './utils/jwt'\n\nexport enum AUTH_MODE {\n  API_KEY = 'API_KEY',\n  AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS',\n  OPENID_CONNECT = 'OPENID_CONNECT',\n}\n\ntype State = {\n  currentCognitoToken?: string;\n  currentOIDCToken: string;\n  currentOIDCTokenDecoded?: string;\n  currentAuthMode: AUTH_MODE;\n  userName?: string;\n  userGroups: string[];\n  email?: string;\n  issuer?: string;\n  apiKey?: string;\n  possibleGroups: string[];\n  isOpen: boolean;\n  supportedAuthModes: AUTH_MODE[];\n  oidcTokenError: string;\n};\n\ntype Props = {\n  onClose: Function;\n  authModes: AUTH_MODE[];\n  selectedAuthMode: AUTH_MODE;\n  currentCognitoToken?: string;\n  currentOIDCToken?: string;\n  apiKey?: string;\n};\nexport class AuthModal extends Component<Props, State> {\n  state:State = {\n    currentCognitoToken: '',\n    currentOIDCTokenDecoded: '',\n    currentOIDCToken: '',\n    userName: '',\n    issuer: '',\n    userGroups: [],\n    apiKey: '',\n    possibleGroups: [],\n    email: '',\n    supportedAuthModes: [AUTH_MODE.API_KEY],\n    isOpen: true,\n    currentAuthMode: AUTH_MODE.API_KEY,\n    oidcTokenError: '',\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n\n    const decodedToken = this.parseJWTToken(this.props.currentCognitoToken) || {};\n    let state = {\n      userName: decodedToken['cognito:username'] || '',\n      userGroups: decodedToken['cognito:groups'] || [],\n      issuer: decodedToken['iss'],\n      email: decodedToken['email'],\n      possibleGroups: decodedToken['cognito:groups'] || [],\n    };\n    this.state = {\n      ...this.state,\n      ...state,\n      currentCognitoToken: this.props.currentCognitoToken || '',\n      currentOIDCToken: this.props.currentOIDCToken || '',\n      currentOIDCTokenDecoded: JSON.stringify(this.parseJWTToken(this.props.currentOIDCToken), null, 4) || '',\n      apiKey: props.apiKey || '',\n      supportedAuthModes: this.props.authModes,\n      currentAuthMode: props.selectedAuthMode,\n    };\n\n    this.onClose = this.onClose.bind(this);\n    this.onGroupChange = this.onGroupChange.bind(this);\n    this.onGroupAdd = this.onGroupAdd.bind(this);\n    this.onGenerate = this.onGenerate.bind(this);\n    this.changeAPIKey = this.changeAPIKey.bind(this);\n    this.changeEmail = this.changeEmail.bind(this);\n    this.onUserNameChange = this.onUserNameChange.bind(this);\n    this.onOIDCTokenChange = this.onOIDCTokenChange.bind(this);\n    this.onAuthModeChange = this.onAuthModeChange.bind(this);\n  }\n\n  onClose() {\n    const result = {\n      authMode: this.state.currentAuthMode,\n      apiKey: this.state.currentAuthMode === AUTH_MODE.API_KEY ? this.state.apiKey : null,\n      cognitoToken:\n        this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n          ? this.state.currentCognitoToken\n          : null,\n      OIDCToken:\n        this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT\n          ? this.state.currentOIDCToken\n          : null,\n    };\n\n    if (this.props.onClose) {\n      this.props.onClose(result);\n    }\n  }\n  onGroupChange(ev, data) {\n    this.setState({\n      userGroups: data.value,\n    });\n  }\n  onGroupAdd(ev, data) {\n    this.setState({\n      possibleGroups: [...this.state.possibleGroups, data.value],\n    });\n  }\n\n  onUserNameChange(ev, data) {\n    this.setState({\n      userName: data.value,\n    });\n  }\n\n  onOIDCTokenChange(ev, data) {\n    this.setState({\n      currentOIDCTokenDecoded: data.value,\n    });\n  }\n\n  onAuthModeChange(ev, data) {\n    this.setState({\n      currentAuthMode: data.value,\n    });\n  }\n\n  changeEmail(ev, data) {\n    this.setState({\n      email: data.value,\n    });\n  }\n  changeAPIKey(ev, data) {\n    this.setState({\n      apiKey: data.value,\n    });\n  }\n\n  render() {\n    let formContent;\n    let actionText = 'Save';\n    if (this.state.currentAuthMode === AUTH_MODE.API_KEY) {\n      formContent = (\n        <>\n          <Form.Field>\n            <label>ApiKey</label>\n            <Input\n              readOnly\n              placeholder='APIKey'\n              value={this.state.apiKey}\n              onChange={this.changeAPIKey}\n            />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      actionText = 'Generate Token';\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Username</label>\n            <Input\n              placeholder='User Name'\n              value={this.state.userName}\n              onChange={this.onUserNameChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Groups</label>\n            <Dropdown\n              placeholder='Choose cognito user groups'\n              search\n              options={this.state.possibleGroups.map(g => ({\n                key: g,\n                value: g,\n                text: g,\n              }))}\n              selection\n              fluid\n              multiple\n              allowAdditions\n              value={this.state.userGroups}\n              onAddItem={this.onGroupAdd}\n              onChange={this.onGroupChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Email</label>\n            <Input placeholder='Email' value={this.state.email} onChange={this.changeEmail} />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n      const errorLabel = this.state.oidcTokenError ? (\n        <Label basic color=\"red\" pointing=\"below\">\n          {this.state.oidcTokenError}\n        </Label>\n      ) : null\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Decoded OpenID Connect Token</label>\n            { errorLabel }\n            <TextArea\n              onChange={this.onOIDCTokenChange}\n              rows={10}\n              placeholder='Decoded OIDC Token'\n              spellCheck=\"false\"\n              value={this.state.currentOIDCTokenDecoded}\n            />\n          </Form.Field>\n        </>\n      );\n    }\n\n    const authModeOptions = this.state.supportedAuthModes\n      .filter(mode => mode)\n      .map(mode => ({\n        key: mode,\n        value: mode,\n        text: mode,\n      }));\n\n    return (\n      <Modal onClose={this.onClose} onActionClick={this.onGenerate} open={this.state.isOpen}>\n        <Modal.Header>Auth Options</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <Dropdown\n              placeholder='Auth Mode'\n              selection\n              options={authModeOptions}\n              value={this.state.currentAuthMode}\n              onChange={this.onAuthModeChange}\n            />\n            <Form>{formContent}</Form>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button primary onClick={this.onGenerate}>\n            {actionText}\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n  onGenerate() {\n    try {\n      const newState = {\n        isOpen: false,\n      };\n      if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n        newState['currentCognitoToken'] = this.generateCognitoJWTToken();\n      } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n        newState['currentOIDCToken'] = this.generateOIDCJWTToken();\n      }\n      this.setState(newState, () => {\n        this.onClose();\n      });\n    } catch (e) {\n    }\n  }\n\n  generateCognitoJWTToken() {\n    const tokenPayload:any = {\n      sub: '7d8ca528-4931-4254-9273-ea5ee853f271',\n      'cognito:groups': [],\n      email_verified: true,\n      algorithm: 'HS256',\n      iss: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_fake_idp',\n      phone_number_verified: true,\n      'cognito:username': '',\n      'cognito:roles': [],\n      aud: '2hifa096b3a24mvm3phskuaqi3',\n      event_id: '18f4067e-9985-4eae-9f33-f45f495470d0',\n      token_use: 'id',\n      phone_number: '+12062062016',\n      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 12,\n      email: this.state.email,\n    };\n    tokenPayload['cognito:username'] = this.state.userName;\n    tokenPayload['cognito:groups'] = this.state.userGroups;\n    tokenPayload['auth_time'] = Math.floor(Date.now() / 1000); // In seconds\n\n    const token = generateToken(tokenPayload);\n    return token;\n  }\n\n  generateOIDCJWTToken() {\n    const tokenPayload = this.state.currentOIDCTokenDecoded || '';\n    try {\n      return generateToken(tokenPayload);\n    } catch (e) {\n      this.setState({\n        oidcTokenError: e.message\n      });\n      throw e;\n    }\n  }\n  parseJWTToken(token) {\n    return parse(token);\n  }\n}\n","import { decode, sign, verify } from 'jsonwebtoken';\n\nexport function generateToken(decodedToken: string | object): string {\n  try {\n    if (typeof decodedToken === 'string') {\n      decodedToken = JSON.parse(decodedToken);\n    }\n    const token = sign(decodedToken, 'open-secrete');\n    verify(token, 'open-secrete');\n    return token;\n  } catch (e) {\n    const err = new Error('Error when generating OIDC token: ' + e.message);\n    throw err;\n  }\n}\n\nexport function parse(token): object {\n  const decodedToken = decode(token);\n  return decodedToken;\n}\n\n/**\n * Updates the exp time of the static token to ensure the shipped token is fresh. If user passes an\n * issuer, updates the token with the issuer\n * @param token\n * @param issuer\n */\nexport function refreshToken(token: string, issuer?: string): string {\n  const tokenObj: any = parse(token);\n  if (!Object.keys(tokenObj).length) {\n    throw new Error(`Invalid token ${token}`);\n  }\n  if (issuer) {\n    tokenObj.iss = issuer;\n  }\n  tokenObj.exp = Math.floor(Date.now() / 100 + 20000);\n  return generateToken(JSON.stringify(tokenObj));\n}\n","import GraphiQL from 'graphiql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport 'graphiql/graphiql.css';\nimport { buildClientSchema, getIntrospectionQuery, GraphQLSchema, parse } from 'graphql';\nimport React, { Component } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { AuthModal, AUTH_MODE } from './AuthModal';\nimport { refreshToken } from './utils/jwt';\n\nconst DEFAULT_COGNITO_JWT_TOKEN = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3ZDhjYTUyOC00OTMxLTQyNTQtOTI3My1lYTVlZTg1M2YyNzEiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6Ly9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS91cy1lYXN0LTFfZmFrZSIsInBob25lX251bWJlcl92ZXJpZmllZCI6dHJ1ZSwiY29nbml0bzp1c2VybmFtZSI6InVzZXIxIiwiYXVkIjoiMmhpZmEwOTZiM2EyNG12bTNwaHNrdWFxaTMiLCJldmVudF9pZCI6ImIxMmEzZTJmLTdhMzYtNDkzYy04NWIzLTIwZDgxOGJkNzhhMSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxOTc0MjY0NDEyLCJwaG9uZV9udW1iZXIiOiIrMTIwNjIwNjIwMTYiLCJleHAiOjE1NjQyNjgwMTIsImlhdCI6MTU2NDI2NDQxMywiZW1haWwiOiJ1c2VyQGRvbWFpbi5jb20ifQ.wHKY2KIhvWn4zpJ4TZ1vS3zRE9mGWsLY4NCV2Cof17Q`;\nconst DEFAULT_OIDC_JWT_TOKEN = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczovL3NvbWUtb2lkYy1wcm92aWRlci9hdXRoIiwicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjp0cnVlLCJhdWQiOiIyaGlmYTA5NmIzYTI0bXZtM3Boc2t1YXFpMyIsImV2ZW50X2lkIjoiYjEyYTNlMmYtN2EzNi00OTNjLTg1YjMtMjBkODE4YmQ3OGExIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE5NzQyNjQ0MTIsInBob25lX251bWJlciI6IisxMjA2MjA2MjAxNiIsImV4cCI6MTU2NDI2ODAxMiwiaWF0IjoxNTY0MjY0NDEzLCJlbWFpbCI6InVzZXJAZG9tYWluLmNvbSJ9.uAegFXomOnA7Dkl-5FcS5icu5kL9Juqb81GnTrOZZqM`;\n\nconst AUTH_TYPE_TO_NAME = {\n  AMAZON_COGNITO_USER_POOLS: 'User Pool',\n  API_KEY: 'API Key',\n  OPENID_CONNECT: 'Open ID',\n};\n\ntype AmplifyAppSyncSimulatorAuthInfo = {\n  authenticationType: string;\n};\ntype AmplifyAppSyncSimulatorApiInfo = {\n  name: string;\n  defaultAuthenticationType: AmplifyAppSyncSimulatorAuthInfo;\n  apiKey: string;\n  additionalAuthenticationProviders: AmplifyAppSyncSimulatorAuthInfo[];\n};\nconst DEFAULT_API_INFO: AmplifyAppSyncSimulatorApiInfo = {\n  name: 'AppSyncTransformer',\n  defaultAuthenticationType: {\n    authenticationType: 'API_KEY',\n  },\n  additionalAuthenticationProviders: [],\n  apiKey: 'da2-fakeApiId123456',\n};\n\nconst LOCAL_STORAGE_KEY_NAMES = {\n  cognitoToken: 'AMPLIFY_GRPAHIQL_EXPLORER_COGNITO_JWT_TOKEN',\n  oidcToken: 'AMPLIFY_GRPAHIQL_EXPLORER_OIDC_JWT_TOKEN',\n  apiKey: 'AMPLIFY_GRPAHIQL_EXPLORER_API_KEY',\n};\n\nfunction getAPIInfo() {\n  return fetch('/api-config').then(response => response.json());\n}\n\nfunction fetcher(params: Object, additionalHeaders): Promise<any> {\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    ...additionalHeaders,\n  };\n  return fetch('/graphql', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(params),\n  })\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(responseBody) {\n      try {\n        return JSON.parse(responseBody);\n      } catch (e) {\n        return responseBody;\n      }\n    });\n}\n\nconst DEFAULT_QUERY = `# shift-option/alt-click on a query below to jump to it in the explorer\n# option/alt-click on a field in the explorer to select all subfields\n`;\n\ntype State = {\n  schema?: GraphQLSchema | null;\n  query: string;\n  explorerIsOpen: boolean;\n  authModalVisible: boolean;\n  jwtToken?: string;\n  apiKey?: string;\n  apiInfo: AmplifyAppSyncSimulatorApiInfo;\n  currentAuthMode: AUTH_MODE;\n  credentials: {\n    apiKey?: string;\n    cognitoJWTToken?: string;\n    oidcJWTToken?: string;\n  };\n};\n\nclass App extends Component<{}, State> {\n  _graphiql: GraphiQL;\n  state: State = {\n    schema: null,\n    query: DEFAULT_QUERY,\n    explorerIsOpen: true,\n    authModalVisible: false,\n    apiInfo: DEFAULT_API_INFO,\n    currentAuthMode: AUTH_MODE.API_KEY,\n    credentials: {\n      apiKey: '',\n      cognitoJWTToken: '',\n      oidcJWTToken: '',\n    },\n  };\n\n  constructor(props, ...rest) {\n    super(props, ...rest);\n    this.fetch = this.fetch.bind(this);\n  }\n  async componentDidMount() {\n    const apiInfo = await getAPIInfo();\n    this.loadCredentials(apiInfo);\n    this.setState({ apiInfo });\n    const introspectionResult = await this.fetch({\n      query: getIntrospectionQuery(),\n    });\n\n    const editor = this._graphiql.getQueryEditor();\n    editor.setOption('extraKeys', {\n      ...(editor.options.extraKeys || {}),\n      'Shift-Alt-LeftClick': this._handleInspectOperation,\n    });\n    if (introspectionResult && introspectionResult.data) {\n      this.setState({ schema: buildClientSchema(introspectionResult.data) });\n    }\n  }\n\n  toggleAuthModal = () =>\n    this.setState((prevState) =>({\n      authModalVisible: !prevState.authModalVisible,\n    }));\n\n  switchAuthMode = val => {\n    this.setState({ currentAuthMode: val });\n  };\n  _handleInspectOperation = (cm: any, mousePos: { line: Number; ch: Number }) => {\n    const parsedQuery = parse(this.state.query || '');\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\");\n      return null;\n    }\n\n    var token = cm.getTokenAt(mousePos);\n    var start = { line: mousePos.line, ch: token.start };\n    var end = { line: mousePos.line, ch: token.end };\n    var relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end),\n    };\n\n    var position = relevantMousePos;\n\n    var def = parsedQuery.definitions.find(definition => {\n      if (!definition.loc) {\n        console.log('Missing location information for definition');\n        return false;\n      }\n\n      const { start, end } = definition.loc;\n      return start <= position.start && end >= position.end;\n    });\n\n    if (!def) {\n      console.error(`Unable to find definition corresponding position at ${position.start}`);\n      return null;\n    }\n\n    var operationKind =\n      def.kind === 'OperationDefinition'\n        ? def.operation\n        : def.kind === 'FragmentDefinition'\n        ? 'fragment'\n        : 'unknown';\n\n    var operationName =\n      def.kind === 'OperationDefinition' && !!def.name\n        ? def.name.value\n        : def.kind === 'FragmentDefinition' && !!def.name\n        ? def.name.value\n        : 'unknown';\n\n    var selector = `.graphiql-explorer-root #${operationKind}-${operationName}`;\n\n    var el = document.querySelector(selector);\n    el && el.scrollIntoView();\n  };\n\n  _handleEditQuery = (query: string): void => this.setState({ query });\n\n  _handleToggleExplorer = () => {\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen });\n  };\n\n  fetch(params) {\n    const headers = {};\n    if (this.state.currentAuthMode === AUTH_MODE.API_KEY) {\n      headers['x-api-key'] = this.state.credentials.apiKey;\n    } else if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      headers['Authorization'] = this.state.credentials.cognitoJWTToken;\n    } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n      headers['Authorization'] = this.state.credentials.oidcJWTToken;\n    }\n    return fetcher(params, headers);\n  }\n\n  storeCredentials(credentials) {\n    const apiInfo = this.state.apiInfo;\n    const newState = {\n      apiInfo: { ...apiInfo, authenticationType: credentials.authMode },\n    };\n    if (credentials.authMode === 'API_KEY') {\n      newState['apiKey'] = credentials.apiKey;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.apiKey, credentials.apiKey);\n    } else if (credentials.authMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      newState['cognitoJWTToken'] = credentials.cognitoToken;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.cognitoToken, credentials.cognitoToken);\n    } else if (credentials.authMode === AUTH_MODE.OPENID_CONNECT) {\n      newState['oidcJWTToken'] = credentials.OIDCToken;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.oidcToken, credentials.OIDCToken);\n    }\n    this.setState((prevState) => ({\n      credentials: {\n        ...prevState.credentials,\n        ...newState,\n      },\n      currentAuthMode: credentials.authMode,\n    }));\n  }\n\n  loadCredentials(apiInfo = this.state.apiInfo) {\n    const credentials = {};\n    const authProviders = [\n      apiInfo.defaultAuthenticationType,\n      ...apiInfo.additionalAuthenticationProviders,\n    ];\n    const possibleAuth = authProviders.map(auth => auth.authenticationType);\n    if (possibleAuth.includes('API_KEY')) {\n      credentials['apiKey'] = DEFAULT_API_INFO.apiKey;\n    }\n\n    if (possibleAuth.includes('AMAZON_COGNITO_USER_POOLS')) {\n      try {\n        credentials['cognitoJWTToken'] = refreshToken(\n          window.localStorage.getItem(LOCAL_STORAGE_KEY_NAMES.cognitoToken) || ''\n        );\n      } catch (e) {\n        console.warn('Invalid Cognito token found in local storage. Using the default OIDC token');\n        // token is not valid\n        credentials['cognitoJWTToken'] = refreshToken(DEFAULT_COGNITO_JWT_TOKEN);\n      }\n    }\n\n    if (possibleAuth.includes('OPENID_CONNECT')) {\n      const issuers = authProviders\n        .filter(auth => auth.authenticationType === AUTH_MODE.OPENID_CONNECT)\n        .map((auth: any) => auth.openIDConnectConfig.Issuer);\n      try {\n        credentials['oidcJWTToken'] = refreshToken(\n          window.localStorage.getItem(LOCAL_STORAGE_KEY_NAMES.oidcToken) || '',\n          issuers[0]\n        );\n      } catch (e) {\n        console.warn('Invalid OIDC token found in local storage. Using the default OIDC token');\n        credentials['oidcJWTToken'] = refreshToken(DEFAULT_OIDC_JWT_TOKEN, issuers[0]);\n      }\n    }\n\n    this.setState(() => ({\n      currentAuthMode:\n        AUTH_MODE[apiInfo.defaultAuthenticationType.authenticationType] || AUTH_MODE.API_KEY,\n    }));\n    this.setState({ credentials });\n    return credentials;\n  }\n\n  render() {\n    const { query, schema, authModalVisible, apiInfo } = this.state;\n    const authModes = [\n      AUTH_MODE[apiInfo.defaultAuthenticationType.authenticationType],\n      ...apiInfo.additionalAuthenticationProviders.map(auth => AUTH_MODE[auth.authenticationType]),\n    ].filter(auth => auth);\n    const authModal = authModalVisible ? (\n      <AuthModal\n        selectedAuthMode={this.state.currentAuthMode}\n        currentOIDCToken={this.state.credentials.oidcJWTToken}\n        currentCognitoToken={this.state.credentials.cognitoJWTToken}\n        apiKey={this.state.credentials.apiKey}\n        authModes={authModes}\n        onClose={credentials => {\n          this.storeCredentials(credentials);\n          this.setState({ authModalVisible: false });\n        }}\n      />\n    ) : null;\n    return (\n      <>\n        {authModal}\n        <div className='graphiql-container'>\n          <GraphiQLExplorer\n            schema={schema}\n            query={query}\n            onEdit={this._handleEditQuery}\n            onRunOperation={operationName => this._graphiql.handleRunQuery(operationName)}\n            explorerIsOpen={this.state.explorerIsOpen}\n            onToggleExplorer={this._handleToggleExplorer}\n          />\n          <GraphiQL\n            ref={ref => (this._graphiql = ref)}\n            fetcher={this.fetch}\n            schema={schema}\n            query={query}\n            onEditQuery={this._handleEditQuery}\n          >\n            <GraphiQL.Toolbar>\n              <GraphiQL.Button\n                onClick={() => this._graphiql.handlePrettifyQuery()}\n                label='Prettify'\n                title='Prettify Query (Shift-Ctrl-P)'\n              />\n              <GraphiQL.Button\n                onClick={() => this._graphiql.handleToggleHistory()}\n                label='History'\n                title='Show History'\n              />\n              <GraphiQL.Button\n                onClick={this._handleToggleExplorer}\n                label='Explorer'\n                title='Toggle Explorer'\n              />\n              <GraphiQL.Button\n                onClick={this.toggleAuthModal}\n                label='Update Auth'\n                title='Auth Setting'\n              />\n              <GraphiQL.Select label='Auth' onSelect={this.switchAuthMode}>\n                {authModes.map(mode => (\n                  <GraphiQL.SelectOption\n                    label={`Use:${AUTH_TYPE_TO_NAME[mode]}`}\n                    value={mode}\n                    key={mode}\n                    selected={mode === this.state.currentAuthMode}\n                  ></GraphiQL.SelectOption>\n                ))}\n              </GraphiQL.Select>\n            </GraphiQL.Toolbar>\n          </GraphiQL>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}